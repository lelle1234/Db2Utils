#!/usr/bin/python3

class DBColumn:
    def __init__(self, colno, colname, typename, length, scale, nulls, bit_data,
                 identity, generated, text, default, column_comment, inline_length):
        self._colno_ = colno
        self._colname_ = colname
        self._typename_ = typename
        self._length_ = length
        self._scale_ = scale
        if nulls == "N":
            self._nulls_ = " NOT NULL"
        else:
            self._nulls_ = ""
        self._bit_data_ = bit_data
        self._identity_ = identity
        self._generated_ = generated
        self._text_ = text
        self._default_ = default
        self._column_comment_ = column_comment
        if inline_length <= 312:
            self._inline_length_ = ""
        else:
            self._inline_length_ = " INLINE LENGTH %s" % inline_length

    def __str__(self):
        if self._colno_ == 0:
            colname = f"( {self._colname_}"
        else:
            colname = f", {self._colname_}"
        if self._default_ is not None:
            default = f" DEFAULT {self._default_}"
        else:
            default = ""

        gendecl = ''
        if self._generated_ == 'D':
            gendecl += "\n        GENERATED BY DEFAULT "
        elif self._generated_ == 'A':
            gendecl += "\n        GENERATED ALWAYS "

        if self._identity_ == 'Y':
            # FIXME: start and increment values
            gendecl += "AS IDENTITY (START WITH 1, INCREMENT BY 1)"
        elif self._text_ is not None:
            gendecl += self._text_

        # typedecl = ""
        if self._typename_ == "CHARACTER":
            typedecl = " CHARACTER(%s)%s%s%s%s" % (
                self._length_, self._bit_data_, default, self._nulls_, gendecl)
            return f"{colname}{typedecl}"

        if self._typename_ == 'VARCHAR':
            typedecl = ' VARCHAR(%s)%s%s%s%s' % (self._length_, self._bit_data_, default, self._nulls_, gendecl)
            return f"{colname}{typedecl}"

        if self._typename_ == 'DECIMAL':
            typedecl = ' DECIMAL(%s,%s)%s%s%s' % (self._length_, self._scale_, default, self._nulls_, gendecl)
            return f"{colname}{typedecl}"

        if self._typename_ in ('CLOB', 'BLOB'):
            typedecl = ' %s(%s)%s%s' % (self._typename_, self._length_, self._inline_length_, self._nulls_)
            return f"{colname}{typedecl}"

        typedecl = ' %s%s%s%s' % (self._typename_, default, self._nulls_, gendecl)
        return f"{colname}{typedecl}"


if __name__ == "__main__":
    #            colno, colname, typename, length, scale, nulls, bit_data, identity, generated, text, default
    # c = DBColumn(3, "A_COL", "VARCHAR", "4" , None , "N", "N", "", "", None, None)
    c1 = DBColumn(0, "COL0", "INTEGER", 43, None, "N", "Y", "A", None, None, '3')
    c2 = DBColumn(1, "COL1", "VARCHAR", "4", None, "N", "", "A", None, None, "'z'")
    print(c1)
    print(c2)


